'use client';
import{__rest}from"tslib";import{jsxs,jsx}from"react/jsx-runtime";import{useComponentTheme}from"../../theme/theme.context.js";import{usePropId}from"../../utils/usePropId.js";import{forwardRef,useState,useRef,useMemo,useEffect}from"react";import{twMerge}from"tailwind-merge";const defaultProps={color:"dark",radius:"full",size:"md",withRing:!0},Switch=forwardRef(((e,s)=>{const t=useComponentTheme("Switch"),a=Object.assign(Object.assign({},defaultProps),e),{className:r="",checked:i=!1,color:l,disabled:n,onChange:c,radius:o,size:d,withRing:m,label:f,labelClassName:u="",description:h,descriptionClassName:b="",error:g,errorClassName:p=""}=a,j=__rest(a,["className","checked","color","disabled","onChange","radius","size","withRing","label","labelClassName","description","descriptionClassName","error","errorClassName"]),N=usePropId(e.id),[w,x]=useState(i),y=useRef(null),C=useRef(!0),S=w?"active":"inactive",R=useMemo((()=>twMerge(t.base({className:r,color:l,radius:o,size:d,state:S,withRing:m}))),[t,l,d,o,S,m,r]);return useEffect((()=>{const e=y.current;if(!e)return;if(C.current)return e.style.justifySelf=w?"end":"start",e.style.transform="",void(C.current=!1);const s=e.getAnimations();s.length>0&&s.forEach((e=>{e.cancel()}));const t=e.parentElement;if(!t)return;const a=t.scrollWidth-e.offsetWidth-(t.scrollHeight-e.offsetHeight),r=w?"translateX(0)":`translateX(${a}px)`,i=w?`translateX(${a}px)`:"translateX(0)";e.style.justifySelf="";e.animate({transform:[r,i]},{duration:50}).onfinish=()=>{e.style.transform="",e.style.justifySelf=w?"end":"start"}}),[w]),useEffect((()=>{c&&!C.current&&c(w)}),[w]),jsxs("div",Object.assign({onClick:()=>{n||x(!w)},className:"flex items-center"},{children:[jsx("button",Object.assign({ref:s,className:R,role:"switch","aria-checked":w,"aria-labelledby":`${N}-label`,disabled:n},j,{children:jsx("span",{ref:y,className:t.inner({radius:o,size:d,state:S})})})),jsxs("div",Object.assign({className:"grid grid-cols-1 justify-items-start"},{children:[jsx("label",Object.assign({id:`${N}-label`,htmlFor:N,className:twMerge(t.label({disabled:n,size:d,className:u}))},{children:f})),h&&jsx("span",Object.assign({className:twMerge(t.description({disabled:n,size:d,className:b}))},{children:h})),g&&jsx("span",Object.assign({className:twMerge(t.error({disabled:n,size:d,className:p}))},{children:g}))]}))]}))}));Switch.displayName="Switch";export{Switch as default};
