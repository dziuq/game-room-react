import{invariant}from"./errors.js";import{color}from"../value/types/color/index.js";import{clamp}from"./clamp.js";import{mix}from"./mix.js";import{mixColor}from"./mix-color.js";import{mixComplex,mixArray,mixObject}from"./mix-complex.js";import{pipe}from"./pipe.js";import{progress}from"./progress.js";import{noop}from"./noop.js";const mixNumber=(r,e)=>o=>mix(r,e,o);function detectMixerFactory(r){return"number"==typeof r?mixNumber:"string"==typeof r?color.test(r)?mixColor:mixComplex:Array.isArray(r)?mixArray:"object"==typeof r?mixObject:mixNumber}function createMixers(r,e,o){const t=[],i=o||detectMixerFactory(r[0]),m=r.length-1;for(let o=0;o<m;o++){let m=i(r[o],r[o+1]);if(e){const r=Array.isArray(e)?e[o]||noop:e;m=pipe(r,m)}t.push(m)}return t}function interpolate(r,e,{clamp:o=!0,ease:t,mixer:i}={}){const m=r.length;if(invariant(m===e.length,"Both input and output ranges must be the same length"),1===m)return()=>e[0];r[0]>r[m-1]&&(r=[...r].reverse(),e=[...e].reverse());const n=createMixers(e,t,i),p=n.length,s=e=>{let o=0;if(p>1)for(;o<r.length-2&&!(e<r[o+1]);o++);const t=progress(r[o],r[o+1],e);return n[o](t)};return o?e=>s(clamp(r[0],r[m-1],e)):s}export{interpolate};
