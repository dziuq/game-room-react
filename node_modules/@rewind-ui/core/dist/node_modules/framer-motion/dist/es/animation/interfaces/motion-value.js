import{warning}from"../../utils/errors.js";import{secondsToMilliseconds}from"../../utils/time-conversion.js";import{instantAnimationState}from"../../utils/use-instant-transition-state.js";import{createAcceleratedAnimation}from"../animators/waapi/create-accelerated-animation.js";import{createInstantAnimation}from"../animators/instant.js";import{getDefaultTransition}from"../utils/default-transitions.js";import{isAnimatable}from"../utils/is-animatable.js";import{getKeyframes}from"../utils/keyframes.js";import{getValueTransition,isTransitionDefined}from"../utils/transitions.js";import{animateValue}from"../animators/js/index.js";const animateMotionValue=(t,e,a,n={})=>i=>{const o=getValueTransition(n,t)||{},s=o.delay||n.delay||0;let{elapsed:r=0}=n;r-=secondsToMilliseconds(s);const l=getKeyframes(e,t,a,o),m=l[0],c=l[l.length-1],u=isAnimatable(t,m),p=isAnimatable(t,c);warning(u===p,`You are trying to animate ${t} from "${m}" to "${c}". ${m} is not an animatable value - to enable this animation set ${m} to a value animatable to ${c} via the \`style\` property.`);let d={keyframes:l,velocity:e.getVelocity(),ease:"easeOut",...o,delay:-r,onUpdate:t=>{e.set(t),o.onUpdate&&o.onUpdate(t)},onComplete:()=>{i(),o.onComplete&&o.onComplete()}};if(isTransitionDefined(o)||(d={...d,...getDefaultTransition(t,d)}),d.duration&&(d.duration=secondsToMilliseconds(d.duration)),d.repeatDelay&&(d.repeatDelay=secondsToMilliseconds(d.repeatDelay)),!u||!p||instantAnimationState.current||!1===o.type)return createInstantAnimation(d);if(e.owner&&e.owner.current instanceof HTMLElement&&!e.owner.getProps().onUpdate){const a=createAcceleratedAnimation(e,t,d);if(a)return a}return animateValue(d)};export{animateMotionValue};
