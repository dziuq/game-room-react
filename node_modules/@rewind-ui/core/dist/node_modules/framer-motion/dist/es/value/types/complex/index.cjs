"use strict";var isCssVariable=require("../../../render/dom/utils/is-css-variable.cjs"),noop=require("../../../utils/noop.cjs"),index=require("../color/index.cjs"),index$1=require("../numbers/index.cjs"),utils=require("../utils.cjs");function test(e){var r,o;return isNaN(e)&&utils.isString(e)&&((null===(r=e.match(utils.floatRegex))||void 0===r?void 0:r.length)||0)+((null===(o=e.match(utils.colorRegex))||void 0===o?void 0:o.length)||0)>0}const cssVarTokeniser={regex:isCssVariable.cssVariableRegex,countKey:"Vars",token:"${v}",parse:noop.noop},colorTokeniser={regex:utils.colorRegex,countKey:"Colors",token:"${c}",parse:index.color.parse},numberTokeniser={regex:utils.floatRegex,countKey:"Numbers",token:"${n}",parse:index$1.number.parse};function tokenise(e,{regex:r,countKey:o,token:n,parse:s}){const t=e.tokenised.match(r);t&&(e["num"+o]=t.length,e.tokenised=e.tokenised.replace(r,n),e.values.push(...t.map(s)))}function analyseComplexValue(e){const r=e.toString(),o={value:r,tokenised:r,values:[],numVars:0,numColors:0,numNumbers:0};return o.value.includes("var(--")&&tokenise(o,cssVarTokeniser),tokenise(o,colorTokeniser),tokenise(o,numberTokeniser),o}function parseComplexValue(e){return analyseComplexValue(e).values}function createTransformer(e){const{values:r,numColors:o,numVars:n,tokenised:s}=analyseComplexValue(e),t=r.length;return e=>{let r=s;for(let s=0;s<t;s++)r=s<n?r.replace(cssVarTokeniser.token,e[s]):s<n+o?r.replace(colorTokeniser.token,index.color.transform(e[s])):r.replace(numberTokeniser.token,utils.sanitize(e[s]));return r}}const convertNumbersToZero=e=>"number"==typeof e?0:e;function getAnimatableNone(e){const r=parseComplexValue(e);return createTransformer(e)(r.map(convertNumbersToZero))}const complex={test:test,parse:parseComplexValue,createTransformer:createTransformer,getAnimatableNone:getAnimatableNone};exports.analyseComplexValue=analyseComplexValue,exports.complex=complex;
