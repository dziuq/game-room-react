import{invariant}from"../../../utils/errors.js";import{isNumericalString}from"../../../utils/is-numerical-string.js";import{isCSSVariableToken}from"./is-css-variable.js";const splitCSSVariableRegex=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function parseCSSVariable(e){const r=splitCSSVariableRegex.exec(e);if(!r)return[,];const[,a,t]=r;return[a,t]}const maxDepth=4;function getVariableValue(e,r,a=1){invariant(a<=maxDepth,`Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`);const[t,i]=parseCSSVariable(e);if(!t)return;const n=window.getComputedStyle(r).getPropertyValue(t);if(n){const e=n.trim();return isNumericalString(e)?parseFloat(e):e}return isCSSVariableToken(i)?getVariableValue(i,r,a+1):i}function resolveCSSVariables(e,{...r},a){const t=e.current;if(!(t instanceof Element))return{target:r,transitionEnd:a};a&&(a={...a}),e.values.forEach((e=>{const r=e.get();if(!isCSSVariableToken(r))return;const a=getVariableValue(r,t);a&&e.set(a)}));for(const e in r){const i=r[e];if(!isCSSVariableToken(i))continue;const n=getVariableValue(i,t);n&&(r[e]=n,a||(a={}),void 0===a[e]&&(a[e]=i))}return{target:r,transitionEnd:a}}export{parseCSSVariable,resolveCSSVariables};
