import{cssVariableRegex}from"../../../render/dom/utils/is-css-variable.js";import{noop}from"../../../utils/noop.js";import{color}from"../color/index.js";import{number}from"../numbers/index.js";import{colorRegex,isString,floatRegex,sanitize}from"../utils.js";function test(e){var o,r;return isNaN(e)&&isString(e)&&((null===(o=e.match(floatRegex))||void 0===o?void 0:o.length)||0)+((null===(r=e.match(colorRegex))||void 0===r?void 0:r.length)||0)>0}const cssVarTokeniser={regex:cssVariableRegex,countKey:"Vars",token:"${v}",parse:noop},colorTokeniser={regex:colorRegex,countKey:"Colors",token:"${c}",parse:color.parse},numberTokeniser={regex:floatRegex,countKey:"Numbers",token:"${n}",parse:number.parse};function tokenise(e,{regex:o,countKey:r,token:n,parse:s}){const t=e.tokenised.match(o);t&&(e["num"+r]=t.length,e.tokenised=e.tokenised.replace(o,n),e.values.push(...t.map(s)))}function analyseComplexValue(e){const o=e.toString(),r={value:o,tokenised:o,values:[],numVars:0,numColors:0,numNumbers:0};return r.value.includes("var(--")&&tokenise(r,cssVarTokeniser),tokenise(r,colorTokeniser),tokenise(r,numberTokeniser),r}function parseComplexValue(e){return analyseComplexValue(e).values}function createTransformer(e){const{values:o,numColors:r,numVars:n,tokenised:s}=analyseComplexValue(e),t=o.length;return e=>{let o=s;for(let s=0;s<t;s++)o=s<n?o.replace(cssVarTokeniser.token,e[s]):s<n+r?o.replace(colorTokeniser.token,color.transform(e[s])):o.replace(numberTokeniser.token,sanitize(e[s]));return o}}const convertNumbersToZero=e=>"number"==typeof e?0:e;function getAnimatableNone(e){const o=parseComplexValue(e);return createTransformer(e)(o.map(convertNumbersToZero))}const complex={test:test,parse:parseComplexValue,createTransformer:createTransformer,getAnimatableNone:getAnimatableNone};export{analyseComplexValue,complex};
