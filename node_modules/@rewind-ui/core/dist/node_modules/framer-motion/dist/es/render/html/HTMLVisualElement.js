import{buildHTMLStyles}from"./utils/build-styles.js";import{isCSSVariableName}from"../dom/utils/is-css-variable.js";import{transformProps}from"./utils/transform.js";import{scrapeMotionValuesFromProps}from"./utils/scrape-motion-values.js";import{renderHTML}from"./utils/render.js";import{getDefaultValueType}from"../dom/value-types/defaults.js";import{measureViewportBox}from"../../projection/utils/measure.js";import{DOMVisualElement}from"../dom/DOMVisualElement.js";import{isMotionValue}from"../../value/utils/is-motion-value.js";function getComputedStyle(e){return window.getComputedStyle(e)}class HTMLVisualElement extends DOMVisualElement{readValueFromInstance(e,t){if(transformProps.has(t)){const e=getDefaultValueType(t);return e&&e.default||0}{const r=getComputedStyle(e),s=(isCSSVariableName(t)?r.getPropertyValue(t):r[t])||0;return"string"==typeof s?s.trim():s}}measureInstanceViewportBox(e,{transformPagePoint:t}){return measureViewportBox(e,t)}build(e,t,r,s){buildHTMLStyles(e,t,r,s.transformTemplate)}scrapeMotionValuesFromProps(e,t){return scrapeMotionValuesFromProps(e,t)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;isMotionValue(e)&&(this.childSubscription=e.on("change",(e=>{this.current&&(this.current.textContent=`${e}`)})))}renderInstance(e,t,r,s){renderHTML(e,t,r,s)}}export{HTMLVisualElement,getComputedStyle};
