import{mix}from"./mix.js";import{mixColor}from"./mix-color.js";import{pipe}from"./pipe.js";import{warning}from"./errors.js";import{color}from"../value/types/color/index.js";import{complex,analyseComplexValue}from"../value/types/complex/index.js";const mixImmediate=(e,r)=>o=>`${o>0?r:e}`;function getMixer(e,r){return"number"==typeof e?o=>mix(e,r,o):color.test(e)?mixColor(e,r):e.startsWith("var(")?mixImmediate(e,r):mixComplex(e,r)}const mixArray=(e,r)=>{const o=[...e],m=o.length,t=e.map(((e,o)=>getMixer(e,r[o])));return e=>{for(let r=0;r<m;r++)o[r]=t[r](e);return o}},mixObject=(e,r)=>{const o={...e,...r},m={};for(const t in o)void 0!==e[t]&&void 0!==r[t]&&(m[t]=getMixer(e[t],r[t]));return e=>{for(const r in m)o[r]=m[r](e);return o}},mixComplex=(e,r)=>{const o=complex.createTransformer(r),m=analyseComplexValue(e),t=analyseComplexValue(r);return m.numVars===t.numVars&&m.numColors===t.numColors&&m.numNumbers>=t.numNumbers?pipe(mixArray(m.values,t.values),o):(warning(!0,`Complex values '${e}' and '${r}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),mixImmediate(e,r))};export{mixArray,mixComplex,mixObject};
