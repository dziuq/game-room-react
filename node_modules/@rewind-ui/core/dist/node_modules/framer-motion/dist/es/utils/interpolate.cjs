"use strict";var errors=require("./errors.cjs"),index=require("../value/types/color/index.cjs"),clamp=require("./clamp.cjs"),mix=require("./mix.cjs"),mixColor=require("./mix-color.cjs"),mixComplex=require("./mix-complex.cjs"),pipe=require("./pipe.cjs"),progress=require("./progress.cjs"),noop=require("./noop.cjs");const mixNumber=(e,r)=>i=>mix.mix(e,r,i);function detectMixerFactory(e){return"number"==typeof e?mixNumber:"string"==typeof e?index.color.test(e)?mixColor.mixColor:mixComplex.mixComplex:Array.isArray(e)?mixComplex.mixArray:"object"==typeof e?mixComplex.mixObject:mixNumber}function createMixers(e,r,i){const o=[],t=i||detectMixerFactory(e[0]),s=e.length-1;for(let i=0;i<s;i++){let s=t(e[i],e[i+1]);if(r){const e=Array.isArray(r)?r[i]||noop.noop:r;s=pipe.pipe(e,s)}o.push(s)}return o}function interpolate(e,r,{clamp:i=!0,ease:o,mixer:t}={}){const s=e.length;if(errors.invariant(s===r.length,"Both input and output ranges must be the same length"),1===s)return()=>r[0];e[0]>e[s-1]&&(e=[...e].reverse(),r=[...r].reverse());const n=createMixers(r,o,t),p=n.length,m=r=>{let i=0;if(p>1)for(;i<e.length-2&&!(r<e[i+1]);i++);const o=progress.progress(e[i],e[i+1],r);return n[i](o)};return i?r=>m(clamp.clamp(e[0],e[s-1],r)):m}exports.interpolate=interpolate;
