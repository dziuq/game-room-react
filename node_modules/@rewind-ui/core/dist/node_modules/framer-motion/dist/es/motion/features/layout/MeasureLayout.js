import React__default,{useContext}from"react";import{usePresence}from"../../../components/AnimatePresence/use-presence.js";import{LayoutGroupContext}from"../../../context/LayoutGroupContext.js";import{SwitchLayoutGroupContext}from"../../../context/SwitchLayoutGroupContext.js";import{globalProjectionState}from"../../../projection/node/state.js";import{correctBorderRadius}from"../../../projection/styles/scale-border-radius.js";import{correctBoxShadow}from"../../../projection/styles/scale-box-shadow.js";import{addScaleCorrector}from"../../../projection/styles/scale-correction.js";import{frame}from"../../../frameloop/frame.js";class MeasureLayoutWithContext extends React__default.Component{componentDidMount(){const{visualElement:e,layoutGroup:o,switchLayoutGroup:t,layoutId:r}=this.props,{projection:s}=e;addScaleCorrector(defaultScaleCorrectors),s&&(o.group&&o.group.add(s),t&&t.register&&r&&t.register(s),s.root.didUpdate(),s.addEventListener("animationComplete",(()=>{this.safeToRemove()})),s.setOptions({...s.options,onExitComplete:()=>this.safeToRemove()})),globalProjectionState.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:o,visualElement:t,drag:r,isPresent:s}=this.props,a=t.projection;return a?(a.isPresent=s,r||e.layoutDependency!==o||void 0===o?a.willUpdate():this.safeToRemove(),e.isPresent!==s&&(s?a.promote():a.relegate()||frame.postRender((()=>{const e=a.getStack();e&&e.members.length||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask((()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()})))}componentWillUnmount(){const{visualElement:e,layoutGroup:o,switchLayoutGroup:t}=this.props,{projection:r}=e;r&&(r.scheduleCheckAfterUnmount(),o&&o.group&&o.group.remove(r),t&&t.deregister&&t.deregister(r))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function MeasureLayout(e){const[o,t]=usePresence(),r=useContext(LayoutGroupContext);return React__default.createElement(MeasureLayoutWithContext,{...e,layoutGroup:r,switchLayoutGroup:useContext(SwitchLayoutGroupContext),isPresent:o,safeToRemove:t})}const defaultScaleCorrectors={borderRadius:{...correctBorderRadius,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:correctBorderRadius,borderTopRightRadius:correctBorderRadius,borderBottomLeftRadius:correctBorderRadius,borderBottomRightRadius:correctBorderRadius,boxShadow:correctBoxShadow};export{MeasureLayout};
