import{transformProps}from"../../render/html/utils/transform.js";import{optimizedAppearDataAttribute}from"../optimized-appear/data-id.js";import{animateMotionValue}from"./motion-value.js";import{isWillChangeMotionValue}from"../../value/use-will-change/is.js";import{setTarget}from"../../render/utils/setters.js";import{frame}from"../../frameloop/frame.js";function shouldBlockAnimation({protectedKeys:t,needsAnimating:e},a){const o=t.hasOwnProperty(a)&&!0!==e[a];return e[a]=!1,o}function animateTarget(t,e,{delay:a=0,transitionOverride:o,type:i}={}){let{transition:n=t.getDefaultTransition(),transitionEnd:r,...s}=t.makeTargetAnimatable(e);const m=t.getValue("willChange");o&&(n=o);const l=[],p=i&&t.animationState&&t.animationState.getState()[i];for(const e in s){const o=t.getValue(e),i=s[e];if(!o||void 0===i||p&&shouldBlockAnimation(p,e))continue;const r={delay:a,elapsed:0,...n};if(window.HandoffAppearAnimations&&!o.hasAnimated){const a=t.getProps()[optimizedAppearDataAttribute];a&&(r.elapsed=window.HandoffAppearAnimations(a,e,o,frame))}o.start(animateMotionValue(e,o,i,t.shouldReduceMotion&&transformProps.has(e)?{type:!1}:r));const d=o.animation;isWillChangeMotionValue(m)&&(m.add(e),d.then((()=>m.remove(e)))),l.push(d)}return r&&Promise.all(l).then((()=>{r&&setTarget(t,r)})),l}export{animateTarget};
