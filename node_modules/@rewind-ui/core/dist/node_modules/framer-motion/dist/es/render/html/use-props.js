import{useMemo}from"react";import{isForcedMotionValue}from"../../motion/utils/is-forced-motion-value.js";import{isMotionValue}from"../../value/utils/is-motion-value.js";import{buildHTMLStyles}from"./utils/build-styles.js";import{createHtmlRenderState}from"./utils/create-render-state.js";function copyRawValuesOnly(e,t,o){for(const s in t)isMotionValue(t[s])||isForcedMotionValue(s,o)||(e[s]=t[s])}function useInitialMotionValues({transformTemplate:e},t,o){return useMemo((()=>{const s=createHtmlRenderState();return buildHTMLStyles(s,t,{enableHardwareAcceleration:!o},e),Object.assign({},s.vars,s.style)}),[t])}function useStyle(e,t,o){const s={};return copyRawValuesOnly(s,e.style||{},e),Object.assign(s,useInitialMotionValues(e,t,o)),e.transformValues?e.transformValues(s):s}function useHTMLProps(e,t,o){const s={},n=useStyle(e,t,o);return e.drag&&!1!==e.dragListener&&(s.draggable=!1,n.userSelect=n.WebkitUserSelect=n.WebkitTouchCallout="none",n.touchAction=!0===e.drag?"none":"pan-"+("x"===e.drag?"y":"x")),void 0===e.tabIndex&&(e.onTap||e.onTapStart||e.whileTap)&&(s.tabIndex=0),s.style=n,s}export{copyRawValuesOnly,useHTMLProps};
