"use strict";var Feature=require("../Feature.cjs"),observers=require("./observers.cjs");const thresholdNames={some:0,all:1};class InViewFeature extends Feature.Feature{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:t,margin:r,amount:s="some",once:n}=e,o={root:t?t.current:void 0,rootMargin:r,threshold:"number"==typeof s?s:thresholdNames[s]};return observers.observeIntersection(this.node.current,o,(e=>{const{isIntersecting:t}=e;if(this.isInView===t)return;if(this.isInView=t,n&&!t&&this.hasEnteredView)return;t&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",t);const{onViewportEnter:r,onViewportLeave:s}=this.node.getProps(),o=t?r:s;o&&o(e)}))}mount(){this.startObserver()}update(){if("undefined"==typeof IntersectionObserver)return;const{props:e,prevProps:t}=this.node;["amount","margin","root"].some(hasViewportOptionChanged(e,t))&&this.startObserver()}unmount(){}}function hasViewportOptionChanged({viewport:e={}},{viewport:t={}}={}){return r=>e[r]!==t[r]}exports.InViewFeature=InViewFeature;
