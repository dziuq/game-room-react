import{resolveVariant}from"../../render/utils/resolve-dynamic-variants.js";import{animateTarget}from"./visual-element-target.js";function animateVariant(r,e,t={}){const n=resolveVariant(r,e,t.custom);let{transition:i=r.getDefaultTransition()||{}}=n||{};t.transitionOverride&&(i=t.transitionOverride);const a=n?()=>Promise.all(animateTarget(r,n,t)):()=>Promise.resolve(),o=r.variantChildren&&r.variantChildren.size?(n=0)=>{const{delayChildren:a=0,staggerChildren:o,staggerDirection:s}=i;return animateChildren(r,e,a+n,o,s,t)}:()=>Promise.resolve(),{when:s}=i;if(s){const[r,e]="beforeChildren"===s?[a,o]:[o,a];return r().then((()=>e()))}return Promise.all([a(),o(t.delay)])}function animateChildren(r,e,t=0,n=0,i=1,a){const o=[],s=(r.variantChildren.size-1)*n,l=1===i?(r=0)=>r*n:(r=0)=>s-r*n;return Array.from(r.variantChildren).sort(sortByTreeOrder).forEach(((r,n)=>{r.notify("AnimationStart",e),o.push(animateVariant(r,e,{...a,delay:t+l(n)}).then((()=>r.notify("AnimationComplete",e))))})),Promise.all(o)}function sortByTreeOrder(r,e){return r.sortNodePosition(e)}export{animateVariant,sortByTreeOrder};
