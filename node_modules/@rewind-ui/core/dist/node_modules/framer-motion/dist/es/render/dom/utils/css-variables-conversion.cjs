"use strict";var errors=require("../../../utils/errors.cjs"),isNumericalString=require("../../../utils/is-numerical-string.cjs"),isCssVariable=require("./is-css-variable.cjs");const splitCSSVariableRegex=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function parseCSSVariable(e){const r=splitCSSVariableRegex.exec(e);if(!r)return[,];const[,a,i]=r;return[a,i]}const maxDepth=4;function getVariableValue(e,r,a=1){errors.invariant(a<=maxDepth,`Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`);const[i,t]=parseCSSVariable(e);if(!i)return;const s=window.getComputedStyle(r).getPropertyValue(i);if(s){const e=s.trim();return isNumericalString.isNumericalString(e)?parseFloat(e):e}return isCssVariable.isCSSVariableToken(t)?getVariableValue(t,r,a+1):t}function resolveCSSVariables(e,{...r},a){const i=e.current;if(!(i instanceof Element))return{target:r,transitionEnd:a};a&&(a={...a}),e.values.forEach((e=>{const r=e.get();if(!isCssVariable.isCSSVariableToken(r))return;const a=getVariableValue(r,i);a&&e.set(a)}));for(const e in r){const t=r[e];if(!isCssVariable.isCSSVariableToken(t))continue;const s=getVariableValue(t,i);s&&(r[e]=s,a||(a={}),void 0===a[e]&&(a[e]=t))}return{target:r,transitionEnd:a}}exports.parseCSSVariable=parseCSSVariable,exports.resolveCSSVariables=resolveCSSVariables;
