import{circOut}from"../../easing/circ.js";import{progress}from"../../utils/progress.js";import{mix}from"../../utils/mix.js";import{noop}from"../../utils/noop.js";import{percent,px}from"../../value/types/numbers/units.js";const borders=["TopLeft","TopRight","BottomLeft","BottomRight"],numBorders=borders.length,asNumber=o=>"string"==typeof o?parseFloat(o):o,isPx=o=>"number"==typeof o||px.test(o);function mixValues(o,t,e,s,r,i){r?(o.opacity=mix(0,void 0!==e.opacity?e.opacity:1,easeCrossfadeIn(s)),o.opacityExit=mix(void 0!==t.opacity?t.opacity:1,0,easeCrossfadeOut(s))):i&&(o.opacity=mix(void 0!==t.opacity?t.opacity:1,void 0!==e.opacity?e.opacity:1,s));for(let r=0;r<numBorders;r++){const i=`border${borders[r]}Radius`;let a=getRadius(t,i),p=getRadius(e,i);if(void 0===a&&void 0===p)continue;a||(a=0),p||(p=0);0===a||0===p||isPx(a)===isPx(p)?(o[i]=Math.max(mix(asNumber(a),asNumber(p),s),0),(percent.test(p)||percent.test(a))&&(o[i]+="%")):o[i]=p}(t.rotate||e.rotate)&&(o.rotate=mix(t.rotate||0,e.rotate||0,s))}function getRadius(o,t){return void 0!==o[t]?o[t]:o.borderRadius}const easeCrossfadeIn=compress(0,.5,circOut),easeCrossfadeOut=compress(.5,.95,noop);function compress(o,t,e){return s=>s<o?0:s>t?1:e(progress(o,t,s))}export{mixValues};
