import{useContext}from"react";import{isAnimationControls}from"../../animation/utils/is-animation-controls.js";import{PresenceContext}from"../../context/PresenceContext.js";import{resolveVariantFromProps}from"../../render/utils/resolve-variants.js";import{useConstant}from"../../utils/use-constant.js";import{resolveMotionValue}from"../../value/utils/resolve-motion-value.js";import{MotionContext}from"../../context/MotionContext/index.js";import{isControllingVariants,isVariantNode}from"../../render/utils/is-controlling-variants.js";function makeState({scrapeMotionValuesFromProps:t,createRenderState:o,onMount:n},e,i,r){const s={latestValues:makeLatestValues(e,i,r,t),renderState:o()};return n&&(s.mount=t=>n(e,t,s)),s}const makeUseVisualState=t=>(o,n)=>{const e=useContext(MotionContext),i=useContext(PresenceContext),r=()=>makeState(t,o,e,i);return n?r():useConstant(r)};function makeLatestValues(t,o,n,e){const i={},r=e(t,{});for(const t in r)i[t]=resolveMotionValue(r[t]);let{initial:s,animate:a}=t;const l=isControllingVariants(t),m=isVariantNode(t);o&&m&&!l&&!1!==t.inherit&&(void 0===s&&(s=o.initial),void 0===a&&(a=o.animate));let u=!!n&&!1===n.initial;u=u||!1===s;const c=u?a:s;if(c&&"boolean"!=typeof c&&!isAnimationControls(c)){(Array.isArray(c)?c:[c]).forEach((o=>{const n=resolveVariantFromProps(t,o);if(!n)return;const{transitionEnd:e,transition:r,...s}=n;for(const t in s){let o=s[t];if(Array.isArray(o)){o=o[u?o.length-1:0]}null!==o&&(i[t]=o)}for(const t in e)i[t]=e[t]}))}return i}export{makeUseVisualState};
