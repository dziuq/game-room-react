import{isNumericalString}from"../../utils/is-numerical-string.js";import{isZeroValueString}from"../../utils/is-zero-value-string.js";import{resolveFinalValueInKeyframes}from"../../utils/resolve-value.js";import{motionValue}from"../../value/index.js";import{complex}from"../../value/types/complex/index.js";import{getAnimatableNone}from"../dom/value-types/animatable-none.js";import{findValueType}from"../dom/value-types/find.js";import{resolveVariant}from"./resolve-dynamic-variants.js";function setMotionValue(e,t,i){e.hasValue(t)?e.getValue(t).set(i):e.addValue(t,motionValue(i))}function setTarget(e,t){const i=resolveVariant(e,t);let{transitionEnd:n={},transition:r={},...o}=i?e.makeTargetAnimatable(i,!1):{};o={...o,...n};for(const t in o){setMotionValue(e,t,resolveFinalValueInKeyframes(o[t]))}}function checkTargetForNewValues(e,t,i){var n,r;const o=Object.keys(t).filter((t=>!e.hasValue(t))),a=o.length;if(a)for(let l=0;l<a;l++){const a=o[l],s=t[a];let u=null;Array.isArray(s)&&(u=s[0]),null===u&&(u=null!==(r=null!==(n=i[a])&&void 0!==n?n:e.readValue(a))&&void 0!==r?r:t[a]),null!=u&&("string"==typeof u&&(isNumericalString(u)||isZeroValueString(u))?u=parseFloat(u):!findValueType(u)&&complex.test(s)&&(u=getAnimatableNone(a,s)),e.addValue(a,motionValue(u,{owner:e})),void 0===i[a]&&(i[a]=u),null!==u&&e.setBaseTarget(a,u))}}function getOriginFromTransition(e,t){if(!t)return;return(t[e]||t.default||t).from}function getOrigin(e,t,i){const n={};for(const r in e){const e=getOriginFromTransition(r,t);if(void 0!==e)n[r]=e;else{const e=i.getValue(r);e&&(n[r]=e.get())}}return n}export{checkTargetForNewValues,getOrigin,getOriginFromTransition,setTarget};
