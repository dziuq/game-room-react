import{createRenderStep}from"./render-step.js";const stepsOrder=["prepare","read","update","preRender","render","postRender"],maxElapsed=40;function createRenderBatcher(e,r){let s=!1,t=!0;const c={delta:0,timestamp:0,isProcessing:!1},a=stepsOrder.reduce(((e,r)=>(e[r]=createRenderStep((()=>s=!0)),e)),{}),n=e=>a[e].process(c),d=()=>{const a=performance.now();s=!1,c.delta=t?1e3/60:Math.max(Math.min(a-c.timestamp,40),1),c.timestamp=a,c.isProcessing=!0,stepsOrder.forEach(n),c.isProcessing=!1,s&&r&&(t=!1,e(d))};return{schedule:stepsOrder.reduce(((r,n)=>{const p=a[n];return r[n]=(r,a=!1,n=!1)=>(s||(s=!0,t=!0,c.isProcessing||e(d)),p.schedule(r,a,n)),r}),{}),cancel:e=>stepsOrder.forEach((r=>a[r].cancel(e))),state:c,steps:a}}export{createRenderBatcher,stepsOrder};
