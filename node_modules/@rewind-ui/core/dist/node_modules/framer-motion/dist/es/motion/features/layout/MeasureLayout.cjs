"use strict";var React=require("react"),usePresence=require("../../../components/AnimatePresence/use-presence.cjs"),LayoutGroupContext=require("../../../context/LayoutGroupContext.cjs"),SwitchLayoutGroupContext=require("../../../context/SwitchLayoutGroupContext.cjs"),state=require("../../../projection/node/state.cjs"),scaleBorderRadius=require("../../../projection/styles/scale-border-radius.cjs"),scaleBoxShadow=require("../../../projection/styles/scale-box-shadow.cjs"),scaleCorrection=require("../../../projection/styles/scale-correction.cjs"),frame=require("../../../frameloop/frame.cjs");class MeasureLayoutWithContext extends React.Component{componentDidMount(){const{visualElement:e,layoutGroup:o,switchLayoutGroup:t,layoutId:r}=this.props,{projection:s}=e;scaleCorrection.addScaleCorrector(defaultScaleCorrectors),s&&(o.group&&o.group.add(s),t&&t.register&&r&&t.register(s),s.root.didUpdate(),s.addEventListener("animationComplete",(()=>{this.safeToRemove()})),s.setOptions({...s.options,onExitComplete:()=>this.safeToRemove()})),state.globalProjectionState.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:o,visualElement:t,drag:r,isPresent:s}=this.props,a=t.projection;return a?(a.isPresent=s,r||e.layoutDependency!==o||void 0===o?a.willUpdate():this.safeToRemove(),e.isPresent!==s&&(s?a.promote():a.relegate()||frame.frame.postRender((()=>{const e=a.getStack();e&&e.members.length||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask((()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()})))}componentWillUnmount(){const{visualElement:e,layoutGroup:o,switchLayoutGroup:t}=this.props,{projection:r}=e;r&&(r.scheduleCheckAfterUnmount(),o&&o.group&&o.group.remove(r),t&&t.deregister&&t.deregister(r))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function MeasureLayout(e){const[o,t]=usePresence.usePresence(),r=React.useContext(LayoutGroupContext.LayoutGroupContext);return React.createElement(MeasureLayoutWithContext,{...e,layoutGroup:r,switchLayoutGroup:React.useContext(SwitchLayoutGroupContext.SwitchLayoutGroupContext),isPresent:o,safeToRemove:t})}const defaultScaleCorrectors={borderRadius:{...scaleBorderRadius.correctBorderRadius,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:scaleBorderRadius.correctBorderRadius,borderTopRightRadius:scaleBorderRadius.correctBorderRadius,borderBottomLeftRadius:scaleBorderRadius.correctBorderRadius,borderBottomRightRadius:scaleBorderRadius.correctBorderRadius,boxShadow:scaleBoxShadow.correctBoxShadow};exports.MeasureLayout=MeasureLayout;
