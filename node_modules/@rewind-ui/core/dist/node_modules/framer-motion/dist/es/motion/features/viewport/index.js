import{Feature}from"../Feature.js";import{observeIntersection}from"./observers.js";const thresholdNames={some:0,all:1};class InViewFeature extends Feature{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:t,margin:r,amount:o="some",once:n}=e,s={root:t?t.current:void 0,rootMargin:r,threshold:"number"==typeof o?o:thresholdNames[o]};return observeIntersection(this.node.current,s,(e=>{const{isIntersecting:t}=e;if(this.isInView===t)return;if(this.isInView=t,n&&!t&&this.hasEnteredView)return;t&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",t);const{onViewportEnter:r,onViewportLeave:o}=this.node.getProps(),s=t?r:o;s&&s(e)}))}mount(){this.startObserver()}update(){if("undefined"==typeof IntersectionObserver)return;const{props:e,prevProps:t}=this.node;["amount","margin","root"].some(hasViewportOptionChanged(e,t))&&this.startObserver()}unmount(){}}function hasViewportOptionChanged({viewport:e={}},{viewport:t={}}={}){return r=>e[r]!==t[r]}export{InViewFeature};
